available.packages()
add2 <- function (x,y) {
x + y
}
add2(3,5)
above10 <- function(vect) {
vect > 10
}
above10(c(1,2,3,10,11,4,5,12))
above10 <- function(vect) {
vect[vect > 10]
}
above10(c(1,2,3,10,11,4,5,12))
aboveN <- function(vect, n) {
use <- vect > n
vect[use]
}
aboveN(c(1,2,3,10,11,4,5,12),5)
aboveN <- function(vect, n = 10) {
use <- vect > n
vect[use]
}
x <- 1:20
abloveN(x)
aboveN(x)
aboveN(x,12)
?mean
formals(above10)
search()
args(power)
make.power <- function(n){
pow <- function(x){
x^n
      }
pow
}
square <- make.power(2)
class(square)
?square
args(square)
qube <- make.power(3)
equal
?equality
?is.equal
?is.equality
identical(square, qube)
square(3)
qube(3)
qube
square
ls(environment(qube))
ls(environment(qube))["n"]
env3 <- ls(environment(qube))
env3$n
env3
get("n", env3)
get("n", environment(qube))
env3 <- environment(qube)
get("n", env3)
env3
class(env3)
env3$n
y <- 10
g <- function(x)
{
y <- 2
x + y
}
f <- function(x)
{
x + y
}
f(1)
g(1)
f(1)
strsplit("Hello world")
strsplit("Hello world", split="")
fact <- factor(strsplit("Hello world",split=""))
fact <- as.factor(strsplit("Hello world",split=""))
s <- strsplit("Hello world", split="")
class(s)
fact <- as.factor(s)
class(s[1])
class(s[[1]])
fact <- as.factor(s[[1]])
fact
fact[d]
fact["d"]
table(fact)
unlist(fact)
unclass(fact)
v <- as.vector(fact)
v
q()
setwd("d:/work/R")
dir.create("Graph01")
setwd("Graph01")
rm(list = ls())
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summaty(pollution$pm25)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(12)
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col="green",breaks=100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = 12, lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(ppm ~ reg, data = pollution, col = "reg")
boxplot(pm25 ~ region, data = pollution, col = "reg")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(pollution, latitude, pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, title = "West")
par(mfrow = c(1,2), mar = c(5,4,2,1))
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cut()
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(car$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
args(qplot)
 qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title("Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone, pch = 2, col = "blue")
plot(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, pch = 16, col = "red")
points(notmay$Wind, notmay$Ozone, pch = 8, col = "red")
legend("topright", pch = c(17,8), col = c("red", "blue"), legend = c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
adline(v = median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
with(airquality, plot(Wind, Ozone, title = "Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
getwd()
dir()
setwd("ExData_Plotting1")
?unzip
source("plot1.R")
?read.table
source("plot1.R")
head(data)
help.search("dplyr")
help.search("tbl_")
help.search("dplyr::read")
help.search("read")
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot1.R")
head(data)
?strptime
class(Data)
class(data)
data$Date = strftime(data$Date,"%d/%m/%Y")
class(data$Date)
head(data)
?read
help.search("read")
d <- "16/12/2007"
class(d)
?strptime
strptime(d,"%d/%m/%Y") -> d2
class(d2)
d2
d2$year
d2$year + 1900
d2$mon
d2$mon + 1
source("plot1.R")
d2$mday
d <- "2007-02-01"
as.POSIXlt(d) -> d2
d2
d2$wday
d <- today()
d <- now()
d <- "2016-02-15"
as.POSIXlt(d) -> d2
d2$wday
source("plot1.R")
source("plot1.R")
as.Date
?as.Date
?as.Time
source("plot1.R")
source("plot1.R")
head(data)
mutate(data, Date = as.Date(Date,"%d/%m/%Y"), Time =as.Date(Time,"%H:%M:%S")) -> d2
head(data)
head(d2)
mutate(data, Date = as.Date(Date,"%d/%m/%Y"), Time =strptime(Time,"%H:%M:%S")) -> d2
as.Time
?as.Date
mutate(data, Date = as.Date(Date,"%d/%m/%Y"), Time =strftime(Time,"%H:%M:%S")) -> d2
mutate(data, Date = as.Date(Date,"%d/%m/%Y"), Time =format(Time,"%H:%M:%S")) -> d2
head(d2)
head(data)
filter(d2, Date$year + 1900 == 2007 & Date$mon + 1 == 2 & Date$mday %in% c(1,2)) -> d2
filter(d2, as.POSIXlt(Date)$year + 1900 == 2007 & as.POSIXlt(Date)$mon + 1 == 2 & as.POSIXlt(Date)$mday %in% c(1,2)) -> d2
head(d2)
tail(d2)
source("plot1.R")
head(data)
tail(data)
hist(data$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)")
mtext("Global Active Power")
main("Global Active Power")
?hist
?hist
source("plot1.R")
?dev.off
source("plot1.R")
?xyplot
?plot
with(data, lines (Time, Global_active_power))
help.search("graphics")
?as.POSIXlt
help.search("POSIXlt")
d <- "2016-02-15"
> as.POSIXlt(d) -> d2
as.POSIXlt(d) -> d2
names(d2)
d2$wday
d2
str(d2)
summary(d2)
d2$wday
source("plot2.R")
?hist
source("plot2.R")
source("plot1.R")
source("plot2.R")
source("plot2.R")
head(data)
head(data)
source("plot2.R")
head(data)
tail(data)
source("plot2.R")
source("plot2.R")
with(data, plot(DayOfWeek, Global_active_power))
with(data, plot(DayOfWeek, Global_active_power))
source("plot2.R")
with(data, plot(DayOfWeek, Global_active_power))
?iif
?if
99
?iff
source("plot2.R")
head(data)
tail(Data)
tail(data)
source("plot2.R")
head(data)
tail(data)
 with(data, plot(DayName, Global_active_power))
?plot
 with(data, plot(DayName, Global_active_power, type = "l"))
 with(data, plot(DayOfWeek, Global_active_power, type = "l"))
 with(data, plot(Time, Global_active_power, type = "l"))
mutate(N = .N)
 with(data, plot(DayOfWeek, Global_active_power, type = "h"))
mutate(TimePOSIX = asPOSIXct(Time))
mutate(data, TimePOSIX = asPOSIXct(Time)) -> data
mutate(data, TimePOSIX = as.POSIXct(Time)) -> data
?as.POSIXct
mutate(data, TimePOSIX = as.POSIXct(Time, format = "HH:mm:SS")) -> data
head(data)
mutate(data, TimePOSIX = as.POSIXct(Time, format = "HH:MM:SS")) -> data
head(data)
mutate(data, TimePOSIX = as.POSIXct(Time, format = "%H:%M:%S")) -> data
head(data)
 with(data, plot(TimePosix, Global_active_power, type = "h"))
 with(data, plot(TimePOSIX, Global_active_power, type = "h"))
 with(data, plot(TimePOSIX, Global_active_power, type = "l"))
mutate(DatePOSIX = Date + TimePOSIX)
mutate(data, DatePOSIX = Date + TimePOSIX) -> data
mutate(data, DatePOSIX = as.POSIXct(Date) + TimePOSIX) -> data
source("plot2.R")
source("plot2.R")
source("plot2.R")
head(data)
with(data, plot(pDateTime, Global_active_power, type = "l"))
source("plot2.R")
source("plot2.R")
?names(par())
names(par())
?par
source("plot3.R")
with(data, plot(pDateTime, Sub_metering_1, col = "black", type = "l", 
                xlab = "", main = "", ylab = "Energy sub metering" 
    ))
with(data, lines(pDateTime, Sub_metering_2, col = "red", type = "l", 
                xlab = "", main = "", ylab = "Energy sub metering" 
    ))
legend("topright", 
       col = c("black", "red", "blue"), 
       legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
      )
with(data, lines(pDateTime, Sub_metering_3, col = "blue", type = "l", 
                xlab = "", main = "", ylab = "Energy sub metering" 
    ))
?legend
legend("topright", 
       col = c("black", "red", "blue"), 
       legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
       lty = 1, twd = 1
      )
legend("topright", 
       col = c("black", "red", "blue"), 
       legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
       lty = 1, lwd = 1
      )
source("plot3.R")
q()
source("D:\\Work\\R\\Graph01\\ExData_Plotting1\\plot4.R")
source("plot4.R")
source("plot4.R")
q()
source("plot2.R")
install.packages("dplyr")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
q()
